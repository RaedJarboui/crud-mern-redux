{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\mern-crud-redux\\\\frontend\\\\src\\\\components\\\\ProductEdit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport { updateProduct, listProductDetails } from '../actions/productActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductEdit = _ref => {\n  _s();\n\n  let {\n    match,\n    history\n  } = _ref;\n  const productId = match.params.id;\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [description, setDescription] = useState('');\n  const dispatch = useDispatch();\n  const productDetails = useSelector(state => state.productDetails);\n  const {\n    loading,\n    error,\n    product\n  } = productDetails;\n  const productupdate = useSelector(state => state.productupdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productupdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: 'PRODUCT_UPDATE_RESET'\n      });\n      history.push('/');\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setDescription(product.description);\n      }\n    }\n  }, [dispatch, history, successUpdate, product, productId]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateProduct({\n      name,\n      description,\n      price\n    }, productId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"description\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter description\",\n            value: description,\n            onChange: e => setDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"price\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"Enter price\",\n            value: price,\n            onChange: e => setPrice(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProductEdit, \"bmSq05aXyPBJmUaLSCyW3d8A2pA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ProductEdit;\nexport default ProductEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductEdit\");","map":{"version":3,"sources":["C:/Users/hp/mern-crud-redux/frontend/src/components/ProductEdit.js"],"names":["React","useState","useEffect","Link","Form","Button","useDispatch","useSelector","FormContainer","updateProduct","listProductDetails","ProductEdit","match","history","productId","params","id","name","setName","price","setPrice","description","setDescription","dispatch","productDetails","state","loading","error","product","productupdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","submitHandler","e","preventDefault","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAAQC,aAAR,EAAsBC,kBAAtB,QAA+C,2BAA/C;;;;AAGA,MAAMC,WAAW,GAAG,QAAqB;AAAA;;AAAA,MAApB;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAoB;AACrC,QAAMC,SAAS,GAACF,KAAK,CAACG,MAAN,CAAaC,EAA7B;AAEF,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACE,QAAMsB,QAAQ,GAAGjB,WAAW,EAA5B;AAGF,QAAMkB,cAAc,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACD,cAAlB,CAAlC;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA8BJ,cAApC;AAEA,QAAMK,aAAa,GAAGtB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACI,aAAlB,CAAjC;AACA,QAAM;AAACH,IAAAA,OAAO,EAAEI,aAAV;AAAwBH,IAAAA,KAAK,EAAEI,WAA/B;AAA2CC,IAAAA,OAAO,EAAEC;AAApD,MACFJ,aADJ;AAGA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+B,aAAJ,EAAmB;AACfV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACArB,MAAAA,OAAO,CAACsB,IAAR,CAAa,GAAb;AACD,KAHH,MAGS;AACR,UAAI,CAACP,OAAO,CAACX,IAAT,IAAiBW,OAAO,CAACQ,GAAR,KAAgBtB,SAArC,EAAgD;AAC7CS,QAAAA,QAAQ,CAACb,kBAAkB,CAACI,SAAD,CAAnB,CAAR;AACD,OAFF,MAEQ;AACLI,QAAAA,OAAO,CAACU,OAAO,CAACX,IAAT,CAAP;AACAG,QAAAA,QAAQ,CAACQ,OAAO,CAACT,KAAT,CAAR;AACAG,QAAAA,cAAc,CAACM,OAAO,CAACP,WAAT,CAAd;AACD;AACF;AAGF,GAfQ,EAeN,CAACE,QAAD,EAAUV,OAAV,EAAkBoB,aAAlB,EAAiCL,OAAjC,EAA0Cd,SAA1C,CAfM,CAAT;;AAoBA,QAAMuB,aAAa,GAAIC,CAAD,IAAK;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAhB,IAAAA,QAAQ,CAACd,aAAa,CAAC;AAACQ,MAAAA,IAAD;AAAMI,MAAAA,WAAN;AAAkBF,MAAAA;AAAlB,KAAD,EAA0BL,SAA1B,CAAd,CAAR;AAIH,GANC;;AAQE,sBACI;AAAA,4BAEE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKF,QAAC,aAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEuB,aAAhB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,YAFd;AAGE,YAAA,KAAK,EAAEpB,IAHT;AAIE,YAAA,QAAQ,EAAGqB,CAAD,IAAOpB,OAAO,CAACoB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJ1B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,aAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,mBAFd;AAGE,YAAA,KAAK,EAAEpB,WAHT;AAIE,YAAA,QAAQ,EAAGiB,CAAD,IAAOhB,cAAc,CAACgB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJjC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,eAoBE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,WAAW,EAAC,aAFd;AAGE,YAAA,KAAK,EAAEtB,KAHT;AAIE,YAAA,QAAQ,EAAGmB,CAAD,IAAOlB,QAAQ,CAACkB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF,eA8BE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALE;AAAA,kBADJ;AAiDH,CA7FD;;GAAM9B,W;UAMeL,W,EAGIC,W,EAGDA,W;;;KAZlBI,W;AA+FN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport {updateProduct,listProductDetails} from '../actions/productActions'\r\n\r\n\r\nconst ProductEdit = ({match,history}) => {\r\n    const productId=match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const productupdate = useSelector((state) => state.productupdate)\r\n  const {loading: loadingUpdate,error: errorUpdate,success: successUpdate\r\n  } = productupdate\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n        dispatch({ type: 'PRODUCT_UPDATE_RESET' })\r\n        history.push('/')\r\n      } else {    \r\n     if (!product.name || product._id !== productId) {\r\n        dispatch(listProductDetails(productId))\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n    \r\n    \r\n  }, [dispatch,history,successUpdate ,product, productId])\r\n\r\n\r\n\r\n\r\n  const submitHandler = (e)=>{\r\n    e.preventDefault()\r\n    dispatch(updateProduct({name,description,price},productId))\r\n    \r\n    \r\n    \r\n}\r\n\r\n    return (\r\n        <>\r\n\r\n          <Link to='/' className='btn btn-light my-3'>\r\n        Go Back\r\n      </Link>\r\n      <FormContainer>\r\n        <h1>Edit Product</h1>\r\n     \r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter description'\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='price'>\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter price'\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n       \r\n      </FormContainer> \r\n    </>\r\n            \r\n       \r\n    )\r\n}\r\n\r\nexport default ProductEdit\r\n\r\n"]},"metadata":{},"sourceType":"module"}